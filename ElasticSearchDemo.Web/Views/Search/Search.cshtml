@model ElasticSearchDemo.Web.ViewModels.SearchViewModel
@{
    ViewBag.Title = "Search Employees";
    var query = @Model.SearchBoxQueryViewModel.Query ?? "";
}
<div class="row">
    <div class="col-lg-2 col-md-3">
        <div class="row pt-3">
            <div>
                <h6 class="font-weight-bold">Filters:</h6>
            </div>
        </div>
        <partial name="_Filters" model="Model.Filters" />
    </div>
    <div class="col-sm">
        <div class="row pt-3">
            <div class="col">
                <div id="vueSearchBox" class="form">
                    <form method="get" asp-action="Search" ref="searchForm">
                        <div class="row mb-3">
                            <div class="col-sm-11 pr-0">
                                <autocomplete :search="search"
                                              default-value="@query"
                                              placeholder="Look For..."
                                              aria-label="Look For..."
                                              :get-result-value="getResultValue"
                                              @@submit="onSubmit"
                                              name="q">
                                </autocomplete>
                            </div>
                            <div class="col-sm-1 pl-0">
                                <div class="search-button-container">
                                    <input class="btn btn-outline-primary" type="submit" id="button-search" value="Search"/>
                                </div>
                            </div>

                            <!--<input type="text" name="q" class="form-control" placeholder="Look for..." aria-label="Look for" aria-describedby="button-search" v-model="searchText">-->

                        </div>
                        <div class="hidden_inputs">
                            @if (Model.SearchBoxQueryViewModel != null && Model.SearchBoxQueryViewModel.ActiveFilters != null)
                            {
                                foreach (var filter in Model.SearchBoxQueryViewModel.ActiveFilters)
                                {
                                    <input type="hidden" name="@filter.Item1" value="@filter.Item2" />
                                }
                            }
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="row pt-0 pb-3">
            <div class="col">
                @if (Model.ActiveFilters != null && Model.ActiveFilters != null)
                {
                    <div class="filters">
                        @foreach (var filter in Model.ActiveFilters)
                        {
                            <a href="@filter.GoUrl" class="badge badge-dark">@filter.DisplayName: @filter.Name</a>
                        }
                    </div>

                }

            </div>
        </div>
        <div class="search-results">
            @if (Model.Results != null && Model.Results.Count > 0)
            {
                foreach (var resultItem in Model.Results)
                {
                    <div class="card mt-1">
                        <div class="card-header">
                            @resultItem.FirstName @resultItem.LastName
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@resultItem.Designation</h5>
                            <p class="card-text">@resultItem.Interests </p>
                            <a asp-controller="Employees" asp-action="Details" asp-route-id="@resultItem.Id" class="btn btn-primary">More Details</a>
                        </div>
                    </div>
                }
            }
        </div>

        @{
            var prevPageDisabledClass = Model.PageInfo.CurrentPage <= 1 ? "disabled" : "";
            var nextPageDisabledClass = Model.PageInfo.CurrentPage == Model.PageInfo.TotalPages ? "disabled" : "";
        }

        <div class="d-flex flex-column align-items-center">
            <label>Elements <strong>@Model.PageInfo.StartElement - @Model.PageInfo.EndElement</strong> of <strong>@Model.PageInfo.TotalCount</strong></label>
            <label>Page @Model.PageInfo.CurrentPage of @Model.PageInfo.TotalPages</label>
        </div>
        <div class="d-flex flex-column align-items-center">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @prevPageDisabledClass"><a class="page-link" href="@Model.PageInfo.PrevPageUrl">Previous</a></li>
                    <li class="page-item @nextPageDisabledClass"><a class="page-link" href="@Model.PageInfo.NextPageUrl">Next</a></li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<style>
    .autocomplete-input {
        font-size: 14px;
    }

    .search-button-container {
        width: 100%;
        height: 100%;
        display: flex;
    }

        .search-button-container input {
            width: 100%;
            height: 100%;
        }
</style>

<script type="text/javascript">
    const searchAppConfig = {
        data() {
            return {

            };
        },
        el: '#vueSearchBox',
        methods: {
            search: function (input) {
                const searchUrl = '/api/search/autocomplete'
                const url = `${searchUrl}?q=${encodeURI(input)}`

                return new Promise((resolve) => {
                    if (input.length < 3) {
                        return resolve([])
                    }

                    fetch(url)
                        .then((response) => response.json())
                        .then((data) => {
                            resolve(data.results)
                        })
                })
            },
            getResultValue: function (result) {
                return result.text
            },
            onSubmit: function (result) {
                var searchForm = this.$refs.searchForm
                setTimeout(function () {
                    searchForm.submit();
                },300);
            },
        }
    }
    Vue.use(Autocomplete);
    var searchApp = new Vue(searchAppConfig);
</script>
